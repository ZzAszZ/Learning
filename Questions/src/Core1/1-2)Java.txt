1.Какая основная идея языка?
    Главная идея заключается в том, что программа представляется в виде так называемого байт-кода, предназначенного
    для выполнения на виртуальной Java-машине. Последнюю иногда называют еще исполняющей системой (run-time system),
    или интерпретатором байт-кода.

2.За счет чего обеспечивается кроссплатформенность?
    Кроссплатформенность Java достигается за счет применения технологии "виртуальной машины", как среды выполнения
    Java-программ, записанных в, так называемом, "байт-коде". Все достаточно просто - записываем программу с помощью
    текстового редактора, компилятор делает из исходного текста байт-код.

3.Какие преимущества у java?
    Главные преимущества языка Java: кроссплатформенность. Написанный вами код будет работать на любой платформе с
    поддержкой Java; надёжность. Этим качеством Java обязан строгой статической типизации.
    Любая переменная или выражение имеют определённый тип на момент компиляции, что сводит к минимуму вероятность ошибки.

4.Какие недостатки у Java?
    Минусы
    Низкая скорость (по сравнению с С и С++)
    Требует много памяти
    Нет поддержки низкоуровневого программирования (Java — высокоуровневый язык). Например, у неё нет указателей
    С 2019 года обновления для бизнеса и коммерческого использования стали платными
    Для ООП нужен опыт, а планирование новой программы занимает много времени

5.Что такое JDK? Что в него входит?
    Бесплатно распространяемый компанией Oracle Corporation комплект разработчика приложений на языке Java,
    включающий в себя компилятор Java, стандартные библиотеки классов Java, примеры, документацию, различные
    утилиты и исполнительную систему Java. В состав JDK не входит интегрированная среда разработки на Java,
    поэтому разработчик, использующий только JDK, вынужден использовать внешний текстовый редактор и компилировать
    свои программы, используя утилиты командной строки.

6.Что такое JRE? что в него входит?
    JRE (Java Runtime Environment) - окружение, необходимое для запуска Java-программ.
    Включает в себя стандартную библиотеку. В нее входят, как базовые пакеты lang, util,
    так и пакеты для работы с различными форматами, базами данных, пользовательским интерфейсом. JVM тоже часть JRE.

7.Что такое JVM?
    Виртуальная машина Java (JVM) - это виртуальная машина, которая позволяет компьютеру запускать программы Java,
    а также программы, написанные на других языках, которые также компилируются в байт-код Java.

8.Что такое byte code?
    Набор инструкций, исполняемых виртуальной машиной Java. Каждый код операции байт-кода - один байт;
    используются не все 256 возможных значений кодов операций, 51 из них зарезервирован для использования в будущем.
    Для программирования на языке Java или других JVM-совместимых языках знание особенностей байт-кода не обязательно,
     тем не менее, «понимание байт-кода и понимание механизмов его генерации компилятором Java помогает
     Java-программисту так же, как и знание языка ассемблера помогает программисту, пишущему на Си или C++».

9.Что такое загрузчик классов (classloader)?
    ClassLoader - самый низкоуровневый, «глубинный» механизм Java, позволяющий вмешиваться практически
    в ядро Java-машины, причем оставаясь в рамках программирования на Java.

10.Что такое JIT?
    Just-in-Time, компиляция «на лету»), динамическая компиляция (англ. dynamic translation) — технология увеличения
    производительности программных систем, использующих байт-код, путём компиляции байт-кода в машинный код или в
    другой формат непосредственно во время работы программы.

11.Что такое сборщик мусора? (Garbage collector)

    Структура памяти Java
    Память в Java состоит из следующих областей:

    Структура памяти Java
    Структура памяти Java
    Native Memory — вся доступная системная память.

    Heap (куча) — часть native memory, выделенная для кучи. Здесь JVM хранит объекты. Это общее пространство для всех
     потоков приложения. Размер этой области памяти настраивается с помощью параметра -Xms (минимальный размер)
     и -Xmx (максимальный размер).

    Stack (стек) — используется для хранения локальных переменных и стека вызовов метода. Для каждого потока выделяется
    свой стек.

    Metaspace (метаданные) — в этой памяти хранятся метаданные классов и статические переменные. Это пространство
    также является общими для всех. Так как metaspace является частью native memory, то его размер зависит от платформы.
    Верхний предел объема памяти, используемой для metaspace, можно настроить с помощью флага MaxMetaspaceSize.

    PermGen (Permanent Generation, постоянное поколение) присутствовало до Java 7. Начиная с Java 8 ему на смену пришла
    область Metaspace.

    CodeCache (кэш кода) — JIT-компилятор компилирует часто исполняемый код, преобразует его в нативный машинный
    код и кеширует для более быстрого выполнения. Это тоже часть native memory.


    Сборка мусора: процесс
    Для сборки мусора используется алгоритм пометок (Mark & Sweep). Этот алгоритм состоит из трех этапов:

    Mark (маркировка). На первом этапе GC сканирует все объекты и помечает живые (объекты, которые все еще используются).
     На этом шаге выполнение программы приостанавливается. Поэтому этот шаг также называется "Stop the World" .

    Sweep (очистка). На этом шаге освобождается память, занятая объектами, не отмеченными на предыдущем шаге.

    Compact (уплотнение). Объекты, пережившие очистку, перемещаются в единый  непрерывный блок памяти. Это уменьшает
    фрагментацию кучи и позволяет проще и быстрее размещать новые объекты.

12.Что такое Heap и Stack память в Java? Чем они отличаются?

    Java Heap (куча) - динамически распредляемая область памяти, создаваемая при старте JVM. Используется Java Runtime
    для выделения памяти под объекты и JRE классы. Создание нового объекта также происходит в куче.
    Здесь работает сборщик мусора: освобождает память путем удаления объектов, на которые нет каких-либо ссылок.
    Любой объект, созданный в куче, имеет глобальный доступ и на него могут ссылаться с любой части приложения.

    Stack (стек) это область хранения данных также находящееся в общей оперативной памяти (RAM). Всякий раз,
    когда вызывается метод, в памяти стека создается новый блок, который содержит примитивы и ссылки на другие
    объекты в методе. Как только метод заканчивает работу, блок также перестает использоваться, тем самым предоставляя
    доступ для следующего метода.

    На основании приведенных выше объяснений, мы можем легко подытожить следующие различия между Heap и Stack памятью в Java.

    Куча используется всеми частями приложения в то время как стек используется только одним потоком исполнения программы.

    Всякий раз, когда создается объект, он всегда хранится в куче, а в памяти стека содержится ссылка на него.

    Память стека содержит только локальные переменные примитивных типов и ссылки на объекты в куче.

    Объекты в куче доступны с любой точки программы, в то время как стековая память не может быть доступна для других
    потоков.

    Управление памятью в стеке осуществляется по схеме LIFO.

    Стековая память существует лишь какое-то время работы программы, а память в куче живет с самого начала до конца
    работы программы.

    Мы можем использовать -Xms и -Xmx опции JVM, чтобы определить начальный и максимальный размер памяти в куче.

    Для стека определить размер памяти можно с помощью опции -Xss .

    Если память стека полностью занята, то Java Runtime бросает java.lang.StackOverflowError, а если память кучи
    заполнена, то бросается исключение java.lang.OutOfMemoryError: Java Heap Space.

    Размер памяти стека намного меньше памяти в куче. Из-за простоты распределения памяти (LIFO), стековая память
    работает намного быстрее кучи.


    написать запрос который выберет имя автора, книгу, цену; упорядочено по убыванию цены, не более 10 записей и только книги стоимость которых превышает 1000, а имя автора начинается на букву Ъ.