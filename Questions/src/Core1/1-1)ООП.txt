1.Что такое ООП?
    Объе́ктно-ориенти́рованное программи́рование (сокр. ООП) — методология программирования, основанная на представлении
    программы в виде совокупности взаимодействующих объектов, каждый из которых является экземпляром определённого
    класса, а классы образуют иерархию наследования.

2.Какие преимущества у ООП?
    Преимущества ООП. Модульность. Объектно-ориентированный подход позволяет сделать код более структурированным,
    в нем легко разобраться стороннему человеку. Благодаря инкапсуляции объектов уменьшается количество ошибок и
    ускоряется разработка с участием большого количества программистов, потому что каждый может работать независимо
    друг от друга. Гибкость. ООП-код легко развивать, дополнять и изменять.

3.Какие недостатки у ООП?
    -ООП требует большой объём теоретических знаний, который нужно освоить, прежде чем вы сможете что-либо написать.
    Разбор вопросов и ответов на собеседовании. Часть 2 - 5

    -Идеи ООП не так просты для понимания и применения на практике (нужно быть в душе немного философом).

    -При применении ООП немного снижается производительность функционирования ПО из-за более сложной организации системы.

    -Для ООП подхода требуется больше памяти, так как всё состоит из классов, интерфейсов, методов, которые занимают
    гораздо больше памяти, нежели обычные переменные.

    -Временные затраты на первоначальный анализ больше, чем при процедурном.

4.Назовите основные принципы ООП.
    Четыре основных принципа объектно-ориентированного программирования следующие.
    -Абстракция. Моделирование требуемых атрибутов и взаимодействий сущностей в виде классов для определения абстрактного
    представления системы.

    -Инкапсуляция. Скрытие внутреннего состояния и функций объекта и предоставление доступа только через открытый набор
    функций.

    -Наследование. Возможность создания новых абстракций на основе существующих.

    -Полиморфизм. Возможность реализации наследуемых свойств или методов отличающимися способами в рамках множества абстракций.

5.Что такое инкапсуляция? (С примером)
    Инкапсуляция – это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали
    реализации от пользователя.

    Самолет летит - как работает двигатель хрен его знает но он летит =))

6.Что такое наследование?(С примером)
    -Наследование. Возможность создания новых абстракций на основе существующих.
    Летающие обьекты - ворона летит и самолет летит. наследование от летающих обьектов.

7.Что такое полиморфизм? (С примером)
     -Полиморфизм. Возможность реализации наследуемых свойств или методов отличающимися способами в рамках множества
     абстракций.

     Летающие обьекты - ворона летит махая крыльями, самолет летит вращая винтом.

8.Что такое ассоциация, агрегация и композиция?
    Ассоциация – это когда один класс включает в себя другой класс в качестве одного из полей.  Ассоциация описывается
    словом «имеет».

    Автомобиль имеет двигатель. Вполне естественно, что он не будет являться наследником двигателя
    (хотя такая архитектура тоже возможна в некоторых ситуациях).


9.Расскажите про раннее и позднее связывание.

    Раннее связывание - это когда метод, который будет вызван, известен во время компиляции, например,
    вызов статического метода.
    Кстати, то что вы называете поздним связываением, есть скорее dynamic dispatch.
    Позднее связывание - это когда вызов метода может быть осуществлен только во время выполнения и у компилятора нет
    информации, чтобы проверить корректность такого вызова.

10.SOLID

        S: Single Responsibility Principle (Принцип единственной ответственности).
        Класс должен быть ответственен лишь за что-то одно. Если класс отвечает за решение нескольких задач, его
        подсистемы, реализующие решение этих задач, оказываются связанными друг с другом. Изменения в одной такой
        подсистеме ведут к изменениям в другой.

        Обратите внимание на то, что этот принцип применим не только к классам, но и к компонентам программного
        обеспечения в более широком смысле.


        O: Open-Closed Principle (Принцип открытости-закрытости).
        Программные сущности (классы, модули, функции) должны быть открыты для расширения, но не для модификации.

        L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
        Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.

        I: Interface Segregation Principle (Принцип разделения интерфейса).
        Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента. Клиенты не должны
        зависеть от интерфейсов, которые они не используют.


        D: Dependency Inversion Principle (Принцип инверсии зависимостей).
        Объектом зависимости должна быть абстракция, а не что-то конкретное.