1.Что такое исключения?
    Исключение — это проблема(ошибка) возникающая во время выполнения программы.
    Исключения могут возникать во многих случаях, например:

    Пользователь ввел некорректные данные.
    Файл, к которому обращается программа, не найден.
    Сетевое соединение с сервером было утеряно во время передачи данных. И т.д.
    Все исключения в Java являются объектами. Поэтому они могут порождаться не только
    автоматически при возникновении исключительной ситуации, но и создаваться самим разработчиком.

2.Опишите иерархию исключений.
    картинка

3.Расскажите про обрабатываемые и необрабатываемые исключения

    1. Checked исключения, это те, которые должны обрабатываться блоком catch или описываться в сигнатуре метода.
    Unchecked могут не обрабатываться и не быть описанными.
    2. Unchecked исключения в Java — наследованные от RuntimeException, checked — от Exception (не включая unchecked).

    Checked исключения отличаются от Unchecked исключения в Java, тем что:
    1)Наличие\обработка Checked исключения проверяются на этапе компиляции. Наличие\обработка Unchecked исключения
    происходит на этапе выполнения.

4.Можно ли обработать необрабатываемые исключения?

5.Какой оператор позволяет принудительно выбросить исключение?
    throw new Exception();

6.О чем говорит ключевое слово throws?
    throws — ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может
    выбросить исключение с указанным типом.

7.Как создать собственное («пользовательское») исключение?
    Существует возможность написать собственные исключения для обработки тех или иных ошибок,
    если нам недостаточно уже существующих библиотек. Для этого мы просто создаём класс-наследник от класса Исключения

    public class StudentNotFoundException extends Exception {

        public StudentNotFoundException (String message) {
            super(message);
        }
    }

    При создании собственных исключений следует учитывать два правила:
    Название нашего класса должно оканчиваться на «Exception»
    Класс должен содержать конструктор со строковой переменной, описывающей детали проблемы Исключения.
    В конструкторе вызывается супер-конструктор с передачей сообщения.

8.Расскажите про механизм обработки исключений в java (Try-catch-finally)

9.Возможно ли использование блока try-finally (без catch)?
    Можно но смысла нет.

10.Может ли один блок catch отлавливать сразу несколько исключений?
    В Java SE 7 и более поздних версиях один блок catch может обрабатывать более одного тип исключения.
    Эта функция может уменьшить дублирование кода и уменьшить искушение поймать слишком широкое исключение.

11.Всегда ли выполняется блок finally? Существуют ли ситуации, когда блок finally не будет выполнен?
    Блок finally сработает, даже если в try или в catch код наткнётся на return. Сначала выполнится finally,
    а потом программа выйдет из метода.
    Единственный случай, когда finally не срабатывает, — критическая ошибка, когда программа вылетела или у
    неё закончилась выделенная память.

12.Может ли метод main() выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?
    Может и оно будет передано в виртуальную машину Java (JVM).

13.В каком порядке следует обрабатывать исключения в catch блоках?
    Как вы видели, мы можем расположить несколько catch после одного try.

    Но есть такое правило — нельзя ставить потомка после предка! (RuntimeException после Exception)

14.Что такое механизм try-with-resources?
    Конструкцию try-with-resources ввели в Java 7. Она дает возможность объявлять один или несколько ресурсов в блоке
    try, которые будут закрыты автоматически без использования finally блока. В качестве ресурса можно использовать
    любой объект, класс которого реализует интерфейс java.lang.AutoCloseable или Java.io.Closable.
    Если try блок также выбрасывает исключение, оно побеждает, а исключение из close () метода подавляется.


15.Что произойдет если исключение будет выброшено из блока catch после чего другое исключение будет выброшено
из блока finally?
    Ответ аналогичный случаю с двумя return — будет обработано в finally блоке. Если было выброшено два
    исключения — одно в try, второе в finally, то исключение в finally «проглотит» исключение выше (см. пример).
     Если до блока finally исключение было обработано, то мы можем получить информацию об исключении в блоке try
     и тем самым не потерять исключение, которое впоследствии может быть перезаписано в finally другим исключением.

16.Что произойдет если исключение будет выброшено из блока catch после чего другое исключение будет выброшено
 из метода close() при использовании try-with-resources?
    Тоже что и с файнали