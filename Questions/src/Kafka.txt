
Сервис ориентированная Архитектура



1.Строительный блок современных архитектур приложений, ложится на достаточно большое колличество существующих кейсов
поэтому удобна и полезна в применении. Помогает оптимизировать работу с большим колличеством эвентов.

    Разработик Джей Крипс. Писатель Кафка писал рассказы ужастики =))) поэтому настройка Это ужас=))


    Использование Кафка
        - Обработка большого обьема данных в реальном времени, обеспечивая сохранность и согласованность этих
            данных без ущерба для производительности.
        - можно использовать как Синхронизатор многопоточных систем.
        - можно исспользовать как базу данных.

        Конкретные применение:
            - Брокер сообщений 99% для межсервисного взаимодействия.
            - Обработчик событий от пользователей.
            - Система очередей.(внутри кафка работает FIFO)
            - Журналирование.
            - Сбор метрик.
            - commitLog
            - центральное хранилище информации.

2. Терминология кафка:
        -Состав кластера кафки
            1.Один процесс Кафки называется Нодой. как пример Кафка-Брокер.

            продюсер пишет(порождает сообщения, написанный нами код)
            Консьюмер получает сообщения.

            -Топик -Логически обоснованная связь сообщений, логическое разделение обрабатываемых данных в Кафка.
            Одна кафка может держать много топиков.
            (Топик если называется Заказы то туда приходят заказы,у них есть своя четкая структура)

            -Партиция(3 штуки в топике)
            каждый Топик делится на Партиции, пришедшее сообщение попадает в какуюто партицию(можно управлять).
            Преимущества три паралельных инстанса могут читать каждый из своей партиции.

            -Базовая структура сообщения
                        -Ключ
                        -Значение
                        -Таймстамп


            -Треугольник кафка выбери два: 1.Консистентность, 2.Сетевые Отказы, 3.Доступность


            ZooKeeper - По сути база данных Вспомогательная система кафки, обеспечивает максимально возможную скорость чтения
            Кафка хранит конфиг настройки, выбрана за счет того что может также как кафка масштабироватся горизонтально.
            Как разрабов она поидее нас особо не интересует.

3. Партиционирование(Шардирование) - где не сравится 1 справится сотня.
            -создание топика.
                    bin/kafka-topics.sh --greate
                    --partitions 12
                    --topic test

                    default.partition = 1

                    партриция полностью независима от системы и для ее функционирования требуются ресурсы.

                    если не создавать топик на прямую а написать туда сообщения кафка создает его автоматом.
                    партиции по умолчанию 1 -
                    идеальный вариант число партиций = числу Consumer (возникает проблема горизонтального маштабирования)
                    поэтому по 4 патриции на консьюмера.

Кафка достаточно отказа устойчивая за счет того что одну и туже функцию могут выполнять разные узлы.
            Количество реплик настраиватся програмистом.
                bin/kafka-topics.sh --create\
                --replication-factor 3 \
                --topic test

                default.replication.factor = 1 (дефолтное значение приводит к потере данных) в минимум 3.
                записи и чтение производится с лидера а фоловеры просто дублируют данные в случае отказа фоловер
                становится лидером.


