                                        SQL и базы данных
1.  Что такое  DDL? Какие операции в него входят? Рассказать про них.
    C помощью операторов, входящих в эту группы, мы определяем структуру базы данных и работаем с объектами этой базы,
    т.е. создаем, изменяем и удаляем их.

    CREATE – используется для создания объектов базы данных;
    ALTER – используется для изменения объектов базы данных;
    DROP – используется для удаления объектов базы данных.

2.  Что такое  DML? Какие операции в него входят? Рассказать про них.
    С помощью этих операторов мы можем добавлять, изменять, удалять и выгружать данные из базы, т.е. манипулировать ими.

    SELECT – осуществляет выборку данных;
    INSERT – добавляет новые данные;
    UPDATE – изменяет существующие данные;
    DELETE – удаляет данные.

3.  Что такое  TCL? Какие операции в него входят? Рассказать про них.
    Группа операторов TCL предназначена как раз для реализации и управления транзакциями

    BEGIN TRANSACTION – служит для определения начала транзакции;
    COMMIT TRANSACTION – применяет транзакцию;
    ROLLBACK TRANSACTION – откатывает все изменения, сделанные в контексте текущей транзакции;
    SAVE TRANSACTION – устанавливает промежуточную точку сохранения внутри транзакции.

4.  Что такое  DCL? Какие операции в него входят? Рассказать про них.
    это операторы для управления разрешениями, с помощью них мы можем разрешать или запрещать выполнение определенных
    операций над объектами базы данных.

    GRANT – предоставляет пользователю или группе разрешения на определённые операции с объектом;
    REVOKE – отзывает выданные разрешения;
    DENY– задаёт запрет, имеющий приоритет над разрешением.

5.  Нюансы работы с NULL в SQL. Как проверить поле на NULL?

    В логике баз данных не возможно сравнить null даже с нулем результат всегда будет неизвестен, поэтому добавляется 1
    третья логическая еденица  UNDOKNOW
    Два противоположных метода
        IS NOT NULL - проверяет если поле не null вернет true.
        IS NULL - проверяет если поле NULL вернет true.

6.  Виды Join’ов?
        -INNER JOIN	Из строк левой_таблицы и правой_таблицы объединяются и возвращаются только те строки,
        по которым выполняются условия_соединения.

        -JOIN	LEFT OUTER JOIN	Возвращаются все строки левой_таблицы (ключевое слово LEFT).
        Данными правой_таблицы дополняются только те строки левой_таблицы, для которых выполняются условия_соединения.
        Для недостающих данных вместо строк правой_таблицы вставляются NULL-значения.

        -RIGHT OUTER JOIN	Возвращаются все строки правой_таблицы (ключевое слово RIGHT).
        Данными левой_таблицы дополняются только те строки правой_таблицы, для которых выполняются условия_соединения.
        Для недостающих данных вместо строк левой_таблицы вставляются NULL-значения.

        -FULL OUTER JOIN	Возвращаются все строки левой_таблицы и правой_таблицы.
        Если для строк левой_таблицы и правой_таблицы выполняются условия_соединения, то они объединяются в одну строку.
        Для строк, для которых не выполняются условия_соединения, NULL-значения вставляются на место левой_таблицы, либо
        на место правой_таблицы,
        в зависимости от того данных какой таблицы в строке не имеется.

        CROSS JOIN	-	Объединение каждой строки левой_таблицы со всеми строками правой_таблицы.
        Этот вид соединения иногда называют декартовым произведением.


7.  Что лучше использовать join или подзапросы? Почему?
    Обычно лучше использовать JOIN, поскольку в большинстве случаев он более понятен и лучше оптимизируется СУБД
    (но 100% этого гарантировать нельзя).
    Так же JOIN имеет заметное преимущество над подзапросами в случае, когда список выбора SELECT содержит столбцы
    более чем из одной таблицы.

    Подзапросы лучше использовать в случаях, когда нужно вычислять агрегатные значения и использовать их для сравнений
    во внешних запросах.

8.  Что делает UNION?
 Команда UNION объединяет данные из нескольких таблиц в одну при выборке. При объединении количество столбцов во
  всех таблицах должно совпадать, иначе будет ошибка Имена столбцов будут такие же, как в основной
  таблице, в которую добавляются данные из других таблиц.

 Внимание: если не используется ключевое слово ALL для UNION, все возвращенные строки будут уникальными,
 так как по умолчанию подразумевается DISTINCT, который удаляет неуникальные значения.
 Чтобы отменить такое поведение - нужно указать ключевое слово ALL, вот так: UNION ALL.


9.  Чем WHERE отличается от HAVING ( ответа про то что используются в разных частях запроса - недостаточно)?

    WHERE сначала выбирает строки, а затем группирует их и вычисляет агрегатные функции
    (таким образом, она отбирает строки для вычисления агрегатов), тогда как HAVING отбирает строки групп
    после группировки и вычисления агрегатных функций.

    В сущности, HAVING очень похож на WHERE - это тоже фильтр.
    в HAVING и только в нём можно писать условия по агрегатным функциям (SUM, COUNT, MAX, MIN и т. д.).


10. Что такое ORDER BY?
    Команда ORDER BY позволяет сортировать записи по определенному полю при выборе из базы данных.
    По умолчанию записи сортируются по возрастанию, чтобы отсортировать по убыванию - поставьте DESC по возрастанию ASC:


11. Что такое GROUP BY?

    Команда GROUP BY позволяет группировать результаты при выборке из базы данных.

    К сгруппированным результатам можно применять любые функции (смотрите примеры).


12. Что такое DISTINCT?
    Команда DISTINCT позволяет выбирать только уникальные значения из базы данных (то есть отсеивает дубли: к примеру,
    в таблице есть две Маши - тогда запрос выведет только первую).

    Вместо DISTINCT можно использовать DISTINCTROW - в mySQL это одно и то же.

    См. также команду count, которая может быть использована для подсчета уникальных значений (в комбинации с distinct).


13. Что такое LIMIT?

    Команда LIMIT задает ограничение на количество записей, выбираемых из базы данных.

    Данная команда может использоваться совместно с командой SELECT, командой DELETE, и командой UPDATE.

    См. также команду order, с помощью которой можно отсортировать выбранные записи.

14. Что такое EXISTS?

    SQL условие EXISTS используется в сочетании с подзапросом и считается выполненным,
    если подзапрос возвращает хотя бы одну строку. Его можно использовать в операторе SELECT, INSERT, UPDATE или DELETE.


15. Расскажите про операторы IN, BETWEEN, LIKE.

        -BETWEEN задает диапазон значений, по которому выбираются записи из базы данных.
    К примеру, можно выбрать записи для поля id от 3 до 10-ти.

        -Команда IN выбирает записи из базы данных по определенным значениям поля.
     К примеру, можно выбрать записи, у которых id имеет значение 1, 3, 7, 14, 28.
     Это будет выглядеть так: WHERE id IN (1, 3, 7, 14, 28).

         -Команда LIKE задает поиск по определенному шаблону.
          См. также команду not, которая делает отрицание (к примеру, так: not like).

          Синтаксис
          SELECT * FROM имя_таблицы WHERE поле LIKE шаблон_поиска

16. Что делает оператор MERGE? Какие у него есть ограничения?
    -оператор MERGE позволяет выбрать строки из одной таблицы для обновления или вставки в другую таблицу.


    В конце инструкции MERGE обязательно должна идти точка с запятой (;) иначе возникнет ошибка;

    Должно быть, по крайней мере, одно условие MATCHED;

    Операцию MERGE можно использовать совместно с CTE (обобщенным табличным выражением);

    В инструкции MERGE можно использовать ключевое слово OUTPUT, для того чтобы посмотреть какие изменения были внесены.
     Для идентификации операции здесь в OUTPUT можно использовать переменную $action;


    На все операции к основной таблице, которые предусмотрены в MERGE (удаления, вставки или обновления), действуют
    все ограничения, определенные для этой таблицы;


    Функция @@ROWCOUNT, если ее использовать после инструкции MERGE, будет возвращать общее количество вставленных,
    обновленных и удаленных строк;

    Для того чтобы использовать MERGE необходимо разрешение на INSERT, UPDATE или DELETE в основной таблице,
    и разрешение SELECT для таблицы источника;

    При использовании MERGE необходимо учитывать, что все триггеры AFTER на INSERT, UPDATE или DELETE, определенные
    для целевой таблицы, будут запускаться.


17. Какие агрегатные функции вы знаете?

Принмает на вход несколько значений выдает 1. Глубина вложения не более 2х.

     -APPROX_COUNT_DISTINCT - Эта функция возвращает приблизительное количество уникальных ненулевых значений в группе.
     -AVG -среднее арифметическое
     -COUNT - находит количество строк в запросе
     -MAX - максимальное значение поля
     -MIN - минимальное значение поля.
     -STRING_AGG -
     -SUM -сумма полей
     -VAR -Возвращает статистическую дисперсию всех значений в указанном выражении. Может сопровождаться предложением OVER.
     -VARP - Возвращает статистическую дисперсию для совокупности для всех значений в указанном выражении.

     Все агрегатные функции за исключением COUNT(*) игнорируют значения NULL.


18. Что такое ограничения (constraints)? Какие вы знаете?

    С помощью ключевого слова CONSTRAINT можно задать имя для ограничений.
    В качестве ограничений могут использоваться PRIMARY KEY, UNIQUE, DEFAULT, CHECK, Внешний ключ.

    Имена ограничений можно задать на уровне столбцов. Они указываются после CONSTRAINT перед атрибутами:


19. (?) Что такое суррогатные ключи?
    -Это дополнительное служебное поле, добавленное к уже имеющимся информационным полям таблицы, единственное
    предназначение которого — служить первичным ключом. Значение этого поля не образуется на основе каких-либо других
    данных из БД, а генерируется искусственно.

    например ID является сурогатным ключем.


20. Что такое индексы? Какие они бывают?




21. Чем TRUNCATE отличается от DELETE?
    DELETE – это оператор DML (Data Manipulation Language)
    TRUNCATE TABLE – это оператор DDL (Data Definition Language);

    DELETE может удалить часть данных за счет использования WHERE
    TRUNCATE TABLE удаляет все данные из таблицы, секцию WHERE использовать нельзя

    DELETE записывает в журнал транзакций удаление каждой строки
    TRUNCATE TABLE удаляет все строки в таблице, не записывая при этом удаление отдельных строк данных в
    журнал транзакций

    Для DELETE требуется больший объем журнала транзакций
    Для TRUNCATE TABLE требуется меньший объем журнала транзакций, за счет того, что она не заносит в журнал запись для
    каждой удаляемой строки

    DELETE выполняется медленнее
    TRUNCATE TABLE выполняется быстрее также за счет меньшего использования журнала транзакций

    DELETE удаляет строки по одной за раз
    TRUNCATE TABLE удаляет все строки в таблице путем освобождения страниц

    DELETE создает блокировку на каждую строку, которую требуется удалить из таблицы
    TRUNCATE TABLE блокирует в целом таблицу и страницу, чтобы удалить все записи

    DELETE сохраняет счетчик идентификаторов и не сбрасывает его до начального значения
    TRUNCATE TABLE сбрасывает счетчик идентификаторов до начального значения

    DELETE может активировать триггер
    TRUNCATE TABLE не может активировать триггер, поскольку в данном случае в журнал не
    записываются удаление отдельных строк

    DELETE сохраняет статистику объекта и выделенное пространство
    TRUNCATE TABLE освобождает все страницы данных таблицы, поэтому TRUNCATE удаляет всю статистику
    и выделенное пространство

    DELETE можно использовать, если таблица является частью индексированного представления
    TRUNCATE TABLE нельзя использовать, если таблица является частью индексированного представления

    Чтобы использовать DELETE, необходимы соответствующие права на удаление данных	Чтобы использовать
    TRUNCATE TABLE, у Вас должны быть права на ALTER TABLE, т.е. на изменение таблицы


22. Что такое хранимые процедуры? Для чего они нужны?
    -Хранимая процедура MySQL представляет собой подпрограмму, хранящуюся в базе данных.
    Она содержит имя, список параметров и операторы SQL. Все популярные системы управления базами данных поддерживают
    хранимые процедуры. Они были введены в MySQL 5.


23. Что такое представления (VIEW)? Для чего они нужны?

Представление (VIEW) — объект базы данных, являющийся результатом выполнения запроса к базе данных, определенного с
помощью оператора SELECT, в момент обращения к представлению.

Представления иногда называют «виртуальными таблицами». Такое название связано с тем, что представление доступно для
пользователя как таблица, но само оно не содержит данных, а извлекает их из таблиц в момент обращения к нему.
Если данные изменены в базовой таблице, то пользователь получит актуальные данные при обращении к представлению,
использующему данную таблицу; кэширования результатов выборки из таблицы при работе представлений не производится.
При этом, механизм кэширования запросов (query cache) работает на уровне запросов пользователя безотносительно к тому,
обращается ли пользователь к таблицам или представлениям.


24. Что такое временные таблицы? Для чего они нужны?

        Временные локальные и глобальные таблицы
        В дополнение к табличным переменным можно определять временные таблицы. Такие таблицы могут быть полезны для
        хранения табличных данных внутри сложного комплексного скрипта.

        Временные таблицы существуют на протяжении сессии базы данных. Если такая таблица создается в редакторе
        запросов (Query Editor) в SQL Server Management Studio, то таблица будет существовать пока открыт редактор
        запросов. Таким образом, к временной таблице можно обращаться из разных скриптов внутри редактора запросов.

        После создания все временные таблицы сохраняются в таблице tempdb, которая имеется по умолчанию в MS SQL Server.

        Если необходимо удалить таблицу до завершения сессии базы данных, то для этой таблицы следует выполнить команду
        DROP TABLE.

        Название временной таблицы начинается со знака решетки #. Если используется один знак #, то создается локальная
        таблица, которая доступна в течение текущей сессии. Ели используются два знака ##, то создается глобальная
        временная таблица. В отличие от локальной глобальная временная таблица доступна всем открытым сессиям базы данных.


25. Что такое транзакции? Расскажите про принципы ACID.

    -Транзакция — это некий набор связанных операций с базой данных.

     В первом приближении это действительно так. Однако, пока определение неполное.
     Не хватает самого главного, а именно — этот набор операций должен представлять единую логическую систему с данными.

     Неявные транзакции, которые предусмотрены на уровне базы данных. Например, БД задает отдельную
     инструкцию INSERT, UPDATE или DELETE как единицу транзакции.

     Явные транзакции — их начало и конец явно обозначаются такими инструкциями, как BEGIN TRANSACTION,
     COMMIT или ROLLBACK.

     -Atomicity или атомарность (A)
     -Consistency или согласованность (C)
     -Isolation или изоляция (I)
     -Durability или долговечность (D)

26. Расскажите про уровни изолированности транзакций.

    -Эффект потерянного обновления возникает, когда несколько транзакций обновляют одни и те же данные,
    не учитывая изменений, сделанных другими транзакциями.

    -Эффект грязного чтения возникает, когда транзакция считывает данные, которые еще не были зафиксированы.

    -Эффект неповторяемого чтения возникает, когда транзакция считывает дважды одну и ту же строку,
    но каждый раз получает разные результаты.

    -Эффект чтения фантомов возникает, когда набор данных соответствует условиям поиска, но изначально не отображается.


    1.Read uncommitted – это уровень изоляции, при котором каждая транзакция видит незафиксированные изменения другой
    транзакции. Справляется с эффектом потерянного обновления, но остаются остальные проблемы:
    эффекты грязного чтения, неповторяемого чтения, чтения фантомов.


    2.Read committed — это уровень изоляции, при котором параллельно исполняющиеся транзакции видят только зафиксированные
    изменения других транзакций. Справляется с эффектами потерянного обновления и грязного чтения,
    остаются эффекты неповторяемого чтения и чтения фантомов.


    3.Repeatable read или snapshot isolation — это уровень изоляции, при котором транзакция не видит изменения данных,
    прочитанные ей ранее, однако способна прочитать новые данные, соответствующие условию поиска.
    Справляется с эффектами потерянного обновления, грязного чтения, неповторяемого чтения, остается эффект чтения фантомов.


    4.Serializable — это уровень изоляции, при котором каждая транзакция выполняется так, как
    будто параллельных транзакций не существует. Справляется со всеми перечисленными выше эффектами.


27. Что такое нормализация и денормализация? Расскажите про 3 нормальные формы?

                    1.Первая нормальная форма

Отношение находится в 1НФ, если все его атрибуты являются простыми, все используемые домены должны содержать только
скалярные значения. Не должно быть повторений строк в таблице.


                    2.Вторая нормальная форма

Отношение находится во 2НФ, если оно находится в 1НФ и каждый не ключевой атрибут неприводимо
зависит от Первичного Ключа(ПК).


                    3.Третья нормальная форма

Отношение находится в 3НФ, когда находится во 2НФ и каждый не ключевой атрибут нетранзитивно зависит от первичного
ключа. Проще говоря, второе правило требует выносить все не ключевые поля, содержимое которых может относиться к
нескольким записям таблицы в отдельные таблицы.


                    4.Нормальная форма Бойса-Кодда (НФБК) (частная форма третьей нормальной формы)



                    5.Четвертая нормальная форма

Отношение находится в 4НФ, если оно находится в НФБК и все нетривиальные многозначные зависимости фактически являются
функциональными зависимостями от ее потенциальных ключей.


                    6.Пятая нормальная форма

Отношения находятся в 5НФ, если оно находится в 4НФ и отсутствуют сложные зависимые соединения между атрибутами.


                    7.Доменно-ключевая нормальная форма


                    8.Шестая нормальная форма

 Переменная отношения находится в шестой нормальной форме тогда и только тогда, когда она удовлетворяет всем
 нетривиальным зависимостям соединения. Из определения следует, что переменная находится в 6НФ тогда и только
 тогда, когда она неприводима, то есть не может быть подвергнута дальнейшей декомпозиции без потерь.
 Каждая переменная отношения, которая находится в 6НФ, также находится и в 5НФ.








28. Что такое TIMESTAMP?

    Хранит 4-байтное целое число, равное количеству секунд, прошедших с полуночи 1 января 1970 года по усреднённому
     времени Гринвича (т.е. нулевой часовой пояс, точка отсчёта часовых поясов). При получении из базы отображается с
     учётом часового пояса. Часовой пояс может быть задан в операционной системе, глобальных настройках MySQL или в
     конкретной сессии. Запомните, что сохраняется всегда количество секунд по UTC (универсальное координированное
     время, солнечное время на меридиане Гринвича), а не по локальному часовому поясу.


Structured Query Language (SQL) — язык структурированных запросов, с помощью него пишутся специальные запросы
(SQL инструкции) к базе данных с целью получения этих данных из базы и для манипулирования этими данными.


http://old.code.mu/sql/limit.html
