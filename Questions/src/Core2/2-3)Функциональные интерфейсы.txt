1.Что такое функциональный интерфейс?
    Функциональный интерфейс — это интерфейс, который содержит ровно один абстрактный метод, то есть описание метода
    без тела. Статические методы и методы по умолчанию при этом не в счёт, их в функциональном интерфейсе может быть
    сколько угодно.
    Когда параметром метода является функциональный интерфейс, при вызове этого метода одним из аргументов должен быть
    блок кода.

2.Для чего нужна аннотация @FunctionalInterface?
    Но и без аннотации @FunctionalInterface компилятор выдаст ошибку, если вы включите в интерфейс больше одного
    абстрактного метода. Так зачем же нужна необязательная аннотация @FunctionalInterface? Давайте рассмотрим
    следующий пример: @FunctionalInterface interface Print { void printString(String testString); } Если в интерфейс
    Print мы добавим еще один метод printString2(), то компилятор или IDE выдаст ошибку. А что, если интерфейс Print
    находится в отдельном модуле и без аннотации @FunctionalInterface? Разработчики этого модуля могут легко добавить
    в интерфейс еще один метод и сломать ваш код. Добавив аннотацию @FunctionalInterface,
    мы сразу получим предупреждение в IDE


3.Какие встроенные функциональные интерфейсы вы знаете?
   Predicate — функциональный интерфейс для проверки соблюдения некоторого условия. Если условие соблюдается,
   возвращает true, иначе — false:

    Consumer (с англ. — “потребитель”) — функциональный интерфейс, который принимает в качестве входного аргумента
    объект типа T, совершает некоторые действия, но при этом ничего не возвращает:

    Supplier (с англ. — поставщик) — функциональный интерфейс, который не принимает никаких аргументов,
    но возвращает некоторый объект типа T:

    Function — этот функциональный интерфейс принимает аргумент T и приводит его к объекту типа R,
    который и возвращается как результат:


    UnaryOperator — функциональный интерфейс, принимает в качестве параметра объект типа T,
    выполняет над ним некоторые операции и возвращает результат операций в виде объекта того же типа T:




4.Что такое ссылка на метод?
    ::

5.Что такое лямбда-выражение? Чем его можно заменить?

    Lambda-выражения привносят в Java функциональное звено, которого так давно не хватало.

    Lambda-выражения – это анонимные функции (может и не 100% верное определение для Java, но зато привносит некоторую
    ясность). Проще говоря, это метод без объявления, т.е. без модификаторов доступа, возвращающие значение и имя.

    Короче говоря, они позволяют написать метод и сразу же использовать его. Особенно полезно в случае однократного
    вызова метода, т.к. сокращает время на объявление и написание метода без необходимости создавать класс.

